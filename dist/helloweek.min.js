!function(t){var e={};function s(a){if(e[a])return e[a].exports;var o=e[a]={i:a,l:!1,exports:{}};return t[a].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,a){s.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:a})},s.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="/dist",s(s.s=0)}({0:function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),s(5);var a=function(){function t(e){void 0===e&&(e={});var s=this;if(this.selectedDays=[],this.options=t.extend(e),this.selector="string"==typeof this.options.selector?document.querySelector(this.options.selector):this.options.selector,null===this.selector)throw new Error("You need to specify a selector!");this.activeDates=null,this.date=this.options.defaultDate?new Date(this.options.defaultDate):new Date,this.todaysDate=this.options.defaultDate?new Date(this.options.defaultDate):new Date,this.month=this.selector.querySelector("."+t.CSS_CLASSES.MONTH),this.week=this.selector.querySelector("."+t.CSS_CLASSES.WEEK),this.label=this.selector.querySelector("."+t.CSS_CLASSES.LABEL),this.readFile(this.options.langFolder+this.options.lang+".json",function(t){s.langs=JSON.parse(t),s.init(function(){})})}return t.prototype.init=function(t){this.date.setDate(1),this.updted(),this.options.onLoad.call(this),t&&t.call(this)},t.prototype.prev=function(t){this.clearCalendar();var e=this.date.getMonth()-1;this.date.setMonth(e),this.updted(),this.options.onChange.call(this),t&&t.call(this)},t.prototype.next=function(t){this.clearCalendar();var e=this.date.getMonth()+1;this.date.setMonth(e),this.updted(),this.options.onChange.call(this),t&&t.call(this)},t.prototype.reset=function(){this.clearCalendar(),this.date=this.options.defaultDate?new Date(this.options.defaultDate):new Date,this.date.setDate(1),this.updted()},t.prototype.selectDay=function(e){var s=this;this.activeDates=this.selector.querySelectorAll("."+t.CSS_CLASSES.IS_ACTIVE);for(var a=0,o=Object.keys(this.activeDates);a<o.length;a++){var i=o[a];this.activeDates[i].addEventListener("click",function(a){var o=a.target;s.options.format?s.lastSelectedDay=s.formatDate(1e3*parseInt(o.dataset.timestamp),s.options.format):s.lastSelectedDay=o.dataset.timestamp,s.options.multiplePick?(s.selectedDays.push(s.lastSelectedDay),a.target.classList.contains(t.CSS_CLASSES.IS_SELECTED)&&(s.selectedDays=s.selectedDays.filter(function(t){return t!==s.lastSelectedDay}))):(a.target.classList.contains(t.CSS_CLASSES.IS_DISABLED)||s.removeActiveClass(),s.selectedDays=[],s.selectedDays.push(s.lastSelectedDay)),a.target.classList.contains(t.CSS_CLASSES.IS_DISABLED)||a.target.classList.toggle(t.CSS_CLASSES.IS_SELECTED),s.options.onSelect.call(s),e&&e.call(s)})}},t.prototype.creatWeek=function(e){var s=document.createElement("span");s.classList.add(t.CSS_CLASSES.WEEK_DAY),s.textContent=e,this.week.appendChild(s)},t.prototype.createMonth=function(){for(var t=this.date.getMonth();this.date.getMonth()===t;)this.createDay(this.date.getDate(),this.date.getDay()),this.date.setDate(this.date.getDate()+1);this.date.setMonth(this.date.getMonth()-1),this.selectDay(function(){})},t.prototype.createDay=function(e,s){var a=this,o=Date.parse(this.date),i=o/1e3,n=document.createElement("div");n.textContent=e,n.classList.add(t.CSS_CLASSES.DAY),n.setAttribute("data-timestamp",i),1===e&&(this.options.weekStart===t.DAYS_WEEK.SUNDAY?n.style.marginLeft=s*(100/7)+"%":s===t.DAYS_WEEK.SUNDAY?n.style.marginLeft=(7-this.options.weekStart)*(100/7)+"%":n.style.marginLeft=100/7*(s-1)+"%"),s!==t.DAYS_WEEK.SUNDAY&&s!==t.DAYS_WEEK.SATURDAY||n.classList.add(t.CSS_CLASSES.IS_WEEKEND),this.options.disabledDaysOfWeek&&this.options.disabledDaysOfWeek.includes(s)&&n.classList.add(t.CSS_CLASSES.IS_DISABLED),this.options.disablePastDays&&this.date.getTime()<=this.todaysDate.getTime()-1||this.options.minDate&&i<=this.options.minDate||this.options.maxDate&&i>=this.options.maxDate?n.classList.add(t.CSS_CLASSES.IS_DISABLED):n.classList.add(t.CSS_CLASSES.IS_ACTIVE),this.options.disableDates&&(this.options.disableDates[0]instanceof Array?this.options.disableDates.map(function(e){a.options.format?o>=new Date(e[0]).getTime()&&o<=new Date(e[1]+" 23:59:59").getTime()&&n.classList.add(t.CSS_CLASSES.IS_DISABLED):o>=e[0]&&o<=e[1]&&n.classList.add(t.CSS_CLASSES.IS_DISABLED)}):this.options.format?this.options.disableDates.includes(this.formatDate(o,this.options.format))&&n.classList.add(t.CSS_CLASSES.IS_DISABLED):(this.options.disableDates.map(function(e){a.formatDate(new Date(o).getTime(),"YYYY-MM-DD")===a.formatDate(new Date(+e).getTime(),"YYYY-MM-DD")&&n.classList.add(t.CSS_CLASSES.IS_DISABLED)}),this.options.disableDates.includes(o.toString())&&n.classList.add(t.CSS_CLASSES.IS_DISABLED))),new Date(this.date).setHours(0,0,0,0)===new Date(this.todaysDate).setHours(0,0,0,0)&&this.options.todayHighlight&&(n.classList.add(t.CSS_CLASSES.IS_TODAY),this.today=i.toString(),this.options.format&&(this.today=this.formatDate(o,this.options.format))),this.options.format?this.selectedDays.find(function(e){e===a.formatDate(o,a.options.format)&&n.classList.toggle(t.CSS_CLASSES.IS_SELECTED)}):this.selectedDays.find(function(e){e===i.toString()&&n.classList.toggle(t.CSS_CLASSES.IS_SELECTED)}),this.month&&this.month.appendChild(n)},t.prototype.monthsAsString=function(t){return this.options.monthShort?this.langs.monthsShort[t]:this.langs.months[t]},t.prototype.weekAsString=function(t){return this.options.weekShort?this.langs.daysShort[t]:this.langs.days[t]},t.prototype.updted=function(){var t=[];this.label.textContent=this.monthsAsString(this.date.getMonth())+" "+this.date.getFullYear();this.options.weekShort?this.langs.daysShort:this.langs.days;this.week.textContent="";for(var e=this.options.weekStart;e<this.langs.daysShort.length;e++)t.push(e);for(e=0;e<this.options.weekStart;e++)t.push(e);for(var s=0,a=t;s<a.length;s++){var o=a[s];this.creatWeek(this.weekAsString(o))}this.createMonth()},t.prototype.clearCalendar=function(){this.month.textContent=""},t.prototype.removeActiveClass=function(){for(var e=0,s=Object.keys(this.activeDates);e<s.length;e++){var a=s[e];this.activeDates[a].classList.remove(t.CSS_CLASSES.IS_SELECTED)}},t.prototype.destroy=function(){this.removeActiveClass()},t.prototype.readFile=function(t,e){var s=new XMLHttpRequest;s.overrideMimeType("application/json"),s.open("GET",t,!0),s.onreadystatechange=function(){4===s.readyState&&200===s.status&&e(s.responseText)},s.send(null)},t.prototype.formatDate=function(t,e){var s=new Date(t);return e=(e=(e=(e=(e=(e=(e=(e=(e=(e=e.replace("dd",s.getDate().toString())).replace("DD",(s.getDate()>9?s.getDate():"0"+s.getDate()).toString())).replace("mm",(s.getMonth()+1).toString())).replace("MMM",this.langs.months[s.getMonth()])).replace("MM",(s.getMonth()+1>9?s.getMonth()+1:"0"+(s.getMonth()+1)).toString())).replace("mmm",this.langs.monthsShort[s.getMonth()])).replace("yyyy",s.getFullYear().toString())).replace("YYYY",s.getFullYear().toString())).replace("YY",s.getFullYear().toString().substring(2))).replace("yy",s.getFullYear().toString().substring(2))},t.extend=function(t){for(var e={selector:".hello-week",lang:"en",langFolder:"./dist/langs/",format:!1,weekShort:!0,monthShort:!1,multiplePick:!1,defaultDate:!1,todayHighlight:!0,disablePastDays:!1,disabledDaysOfWeek:!1,disableDates:!1,weekStart:0,minDate:!1,maxDate:!1,onLoad:function(){},onChange:function(){},onSelect:function(){}},s=t,a=0,o=Object.keys(s);a<o.length;a++){var i=o[a];e[i]=s[i]}return e},t.CSS_CLASSES={MONTH:"hello-week__month",DAY:"hello-week__day",WEEK:"hello-week__week",WEEK_DAY:"hello-week__week__day",LABEL:"hello-week__label",IS_ACTIVE:"is-active",IS_SELECTED:"is-selected",IS_DISABLED:"is-disabled",IS_TODAY:"is-today",IS_WEEKEND:"is-weekend"},t.DAYS_WEEK={SUNDAY:0,MONDAY:1,TUESDAY:2,WEDNESDAY:3,THURSDAY:4,FRIDAY:5,SATURDAY:6},t}();e.HelloWeek=a;var o,i=s(0);!function(t){t.HelloWeek=i.HelloWeek}(o=e.MyModule||(e.MyModule={})),window.HelloWeek=o.HelloWeek},5:function(t,e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,