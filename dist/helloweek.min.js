/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/hello-week.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/styles/hello-week.scss":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/styles/hello-week.scss ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ":root {\n  --hello-week-bg-color: #fff;\n  --hello-week-bg-day: #fff;\n  --hello-week-color-day: #ffa07a;\n  --hello-week-bg-week: #fff;\n  --hello-week-color-week: #ffa07a;\n  --hello-week-bg-tody: #3e3e3e;\n  --hello-week-color-tody: #fff;\n  --hello-week-bg-selected: #7fcbc3;\n  --hello-week-color-selected: #fff;\n  --hello-week-bg-weekend: #f3f3f3;\n  --hello-week-color-weekend: silver;\n  --hello-week-bg-disabled: #f7f8fb;\n  --hello-week-color-disabled: #b3bdd9; }\n\n* {\n  box-sizing: border-box; }\n\n.hello-week {\n  width: 100%;\n  margin: 0 auto;\n  padding: 1rem;\n  border-radius: var(--hello-week-border-radius);\n  background-color: var(--hello-week-bg-color);\n  box-shadow: 0 2px 20px 8px rgba(0, 0, 0, 0.12);\n  user-select: none; }\n  .hello-week__header {\n    display: flex;\n    align-items: center;\n    padding: 2rem 1rem; }\n  .hello-week__label {\n    width: 100%;\n    font-size: 1.6rem;\n    font-weight: 100;\n    text-align: center; }\n  .hello-week__week {\n    display: flex;\n    background-color: var(--hello-week-bg-week);\n    color: var(--hello-week-color-week); }\n    .hello-week__week__day {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      width: 14.28%;\n      padding: 1rem;\n      font-size: 1rem;\n      font-weight: 400;\n      text-transform: uppercase;\n      cursor: pointer; }\n  .hello-week__month {\n    display: flex;\n    flex-wrap: wrap; }\n  .hello-week__day {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 14.28%;\n    padding: 1rem;\n    border-radius: var(--hello-week-border-radius);\n    background-color: #fff; }\n    .hello-week__day.is-active {\n      cursor: pointer; }\n    .hello-week__day.is-today {\n      background-color: var(--hello-week-bg-tody);\n      color: var(--hello-week-color-tody); }\n    .hello-week__day.is-weekend {\n      background-color: var(--hello-week-bg-weekend);\n      color: var(--hello-week-color-weekend); }\n    .hello-week__day.is-selected {\n      background-color: var(--hello-week-bg-selected);\n      color: var(--hello-week-color-selected); }\n    .hello-week__day.is-disabled {\n      border-radius: 0;\n      background-color: var(--hello-week-bg-disabled);\n      color: var(--hello-week-color-disabled);\n      cursor: not-allowed; }\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/style-loader/addStyles.js":
/*!************************************************!*\
  !*** ./node_modules/style-loader/addStyles.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var stylesInDom = {},
	memoize = function(fn) {
		var memo;
		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	},
	isOldIE = memoize(function() {
		// Test for IE <= 9 as proposed by Browserhacks
		// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
		// Tests for existence of standard globals is to allow style-loader 
		// to operate correctly into non-standard environments
		// @see https://github.com/webpack-contrib/style-loader/issues/177
		return window && document && document.all && !window.atob;
	}),
	getElement = (function(fn) {
		var memo = {};
		return function(selector) {
			if (typeof memo[selector] === "undefined") {
				memo[selector] = fn.call(this, selector);
			}
			return memo[selector]
		};
	})(function (styleTarget) {
		return document.querySelector(styleTarget)
	}),
	singletonElement = null,
	singletonCounter = 0,
	styleElementsInsertedAtTop = [],
	fixUrls = __webpack_require__(/*! ./fixUrls */ "./node_modules/style-loader/fixUrls.js");

module.exports = function(list, options) {
	if(typeof DEBUG !== "undefined" && DEBUG) {
		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};
	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (typeof options.singleton === "undefined") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (typeof options.insertInto === "undefined") options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

	var styles = listToStyles(list);
	addStylesToDom(styles, options);

	return function update(newList) {
		var mayRemove = [];
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			domStyle.refs--;
			mayRemove.push(domStyle);
		}
		if(newList) {
			var newStyles = listToStyles(newList);
			addStylesToDom(newStyles, options);
		}
		for(var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];
			if(domStyle.refs === 0) {
				for(var j = 0; j < domStyle.parts.length; j++)
					domStyle.parts[j]();
				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom(styles, options) {
	for(var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];
		if(domStyle) {
			domStyle.refs++;
			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}
			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];
			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}
			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles(list) {
	var styles = [];
	var newStyles = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};
		if(!newStyles[id])
			styles.push(newStyles[id] = {id: id, parts: [part]});
		else
			newStyles[id].parts.push(part);
	}
	return styles;
}

function insertStyleElement(options, styleElement) {
	var styleTarget = getElement(options.insertInto)
	if (!styleTarget) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}
	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
	if (options.insertAt === "top") {
		if(!lastStyleElementInsertedAtTop) {
			styleTarget.insertBefore(styleElement, styleTarget.firstChild);
		} else if(lastStyleElementInsertedAtTop.nextSibling) {
			styleTarget.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			styleTarget.appendChild(styleElement);
		}
		styleElementsInsertedAtTop.push(styleElement);
	} else if (options.insertAt === "bottom") {
		styleTarget.appendChild(styleElement);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement(styleElement) {
	styleElement.parentNode.removeChild(styleElement);
	var idx = styleElementsInsertedAtTop.indexOf(styleElement);
	if(idx >= 0) {
		styleElementsInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement(options) {
	var styleElement = document.createElement("style");
	options.attrs.type = "text/css";

	attachTagAttrs(styleElement, options.attrs);
	insertStyleElement(options, styleElement);
	return styleElement;
}

function createLinkElement(options) {
	var linkElement = document.createElement("link");
	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	attachTagAttrs(linkElement, options.attrs);
	insertStyleElement(options, linkElement);
	return linkElement;
}

function attachTagAttrs(element, attrs) {
	Object.keys(attrs).forEach(function (key) {
		element.setAttribute(key, attrs[key]);
	});
}

function addStyle(obj, options) {
	var styleElement, update, remove;

	if (options.singleton) {
		var styleIndex = singletonCounter++;
		styleElement = singletonElement || (singletonElement = createStyleElement(options));
		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
	} else if(obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function") {
		styleElement = createLinkElement(options);
		update = updateLink.bind(null, styleElement, options);
		remove = function() {
			removeStyleElement(styleElement);
			if(styleElement.href)
				URL.revokeObjectURL(styleElement.href);
		};
	} else {
		styleElement = createStyleElement(options);
		update = applyToTag.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
		};
	}

	update(obj);

	return function updateStyle(newObj) {
		if(newObj) {
			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
				return;
			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;
		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag(styleElement, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = styleElement.childNodes;
		if (childNodes[index]) styleElement.removeChild(childNodes[index]);
		if (childNodes.length) {
			styleElement.insertBefore(cssNode, childNodes[index]);
		} else {
			styleElement.appendChild(cssNode);
		}
	}
}

function applyToTag(styleElement, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		styleElement.setAttribute("media", media)
	}

	if(styleElement.styleSheet) {
		styleElement.styleSheet.cssText = css;
	} else {
		while(styleElement.firstChild) {
			styleElement.removeChild(styleElement.firstChild);
		}
		styleElement.appendChild(document.createTextNode(css));
	}
}

function updateLink(linkElement, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/* If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
	and there is no publicPath defined then lets turn convertToAbsoluteUrls
	on by default.  Otherwise default to the convertToAbsoluteUrls option
	directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls){
		css = fixUrls(css);
	}

	if(sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = linkElement.href;

	linkElement.href = URL.createObjectURL(blob);

	if(oldSrc)
		URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/fixUrls.js":
/*!**********************************************!*\
  !*** ./node_modules/style-loader/fixUrls.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./src/scripts/hello-week.ts":
/*!***********************************!*\
  !*** ./src/scripts/hello-week.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ../styles/hello-week.scss */ "./src/styles/hello-week.scss");
var HelloWeek = (function () {
    function HelloWeek(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.selectedDays = [];
        this.options = HelloWeek.extend(options);
        this.selector = typeof this.options.selector === 'string' ? document.querySelector(this.options.selector) : this.options.selector;
        if (this.selector === null) {
            throw new Error('You need to specify a selector!');
        }
        this.activeDates = null;
        this.date = this.options.defaultDate ? new Date(this.options.defaultDate) : new Date();
        this.todaysDate = this.options.defaultDate ? new Date(this.options.defaultDate) : new Date();
        this.month = this.selector.querySelector('.' + HelloWeek.CSS_CLASSES.MONTH);
        this.week = this.selector.querySelector('.' + HelloWeek.CSS_CLASSES.WEEK);
        this.label = this.selector.querySelector('.' + HelloWeek.CSS_CLASSES.LABEL);
        this.readFile(this.options.langFolder + this.options.lang + '.json', function (text) {
            _this.langs = JSON.parse(text);
            _this.init(function () { });
        });
    }
    HelloWeek.prototype.init = function (callback) {
        this.date.setDate(1);
        this.updted();
        this.options.onLoad.call(this);
        if (callback) {
            callback.call(this);
        }
    };
    HelloWeek.prototype.prev = function (callback) {
        this.clearCalendar();
        var prevMonth = this.date.getMonth() - 1;
        this.date.setMonth(prevMonth);
        this.updted();
        this.options.onChange.call(this);
        if (callback) {
            callback.call(this);
        }
    };
    HelloWeek.prototype.next = function (callback) {
        this.clearCalendar();
        var nextMonth = this.date.getMonth() + 1;
        this.date.setMonth(nextMonth);
        this.updted();
        this.options.onChange.call(this);
        if (callback) {
            callback.call(this);
        }
    };
    HelloWeek.prototype.reset = function () {
        this.clearCalendar();
        this.date = this.options.defaultDate ? new Date(this.options.defaultDate) : new Date();
        this.date.setDate(1);
        this.updted();
    };
    HelloWeek.prototype.selectDay = function (callback) {
        var _this = this;
        this.activeDates = this.selector.querySelectorAll('.' + HelloWeek.CSS_CLASSES.IS_ACTIVE);
        for (var _i = 0, _a = Object.keys(this.activeDates); _i < _a.length; _i++) {
            var i = _a[_i];
            this.activeDates[i].addEventListener('click', function (event) {
                var selectDay = event.target;
                if (_this.options.format) {
                    _this.lastSelectedDay = _this.formatDate(parseInt(selectDay.dataset.timestamp) * 1000, _this.options.format);
                }
                else {
                    _this.lastSelectedDay = selectDay.dataset.timestamp;
                }
                if (_this.options.multiplePick) {
                    _this.selectedDays.push(_this.lastSelectedDay);
                    if (event.target.classList.contains(HelloWeek.CSS_CLASSES.IS_SELECTED)) {
                        _this.selectedDays = _this.selectedDays.filter(function (day) { return day !== _this.lastSelectedDay; });
                    }
                }
                else {
                    if (!event.target.classList.contains(HelloWeek.CSS_CLASSES.IS_DISABLED)) {
                        _this.removeActiveClass();
                    }
                    _this.selectedDays = [];
                    _this.selectedDays.push(_this.lastSelectedDay);
                }
                if (!event.target.classList.contains(HelloWeek.CSS_CLASSES.IS_DISABLED)) {
                    event.target.classList.toggle(HelloWeek.CSS_CLASSES.IS_SELECTED);
                }
                _this.options.onSelect.call(_this);
                if (callback) {
                    callback.call(_this);
                }
            });
        }
    };
    HelloWeek.prototype.creatWeek = function (dayShort) {
        var weekDay = document.createElement('span');
        weekDay.classList.add(HelloWeek.CSS_CLASSES.WEEK_DAY);
        weekDay.textContent = dayShort;
        this.week.appendChild(weekDay);
    };
    HelloWeek.prototype.createMonth = function () {
        var currentMonth = this.date.getMonth();
        while (this.date.getMonth() === currentMonth) {
            this.createDay(this.date.getDate(), this.date.getDay());
            this.date.setDate(this.date.getDate() + 1);
        }
        this.date.setMonth(this.date.getMonth() - 1);
        this.selectDay(function () { });
    };
    HelloWeek.prototype.createDay = function (num, day) {
        var _this = this;
        var unixTimestamp = Date.parse(this.date);
        var timestamp = unixTimestamp / 1000;
        var newDay = document.createElement('div');
        newDay.textContent = num;
        newDay.classList.add(HelloWeek.CSS_CLASSES.DAY);
        newDay.setAttribute('data-timestamp', timestamp);
        if (num === 1) {
            if (this.options.weekStart === HelloWeek.DAYS_WEEK.SUNDAY) {
                newDay.style.marginLeft = ((day) * (100 / 7)) + '%';
            }
            else {
                if (day === HelloWeek.DAYS_WEEK.SUNDAY) {
                    newDay.style.marginLeft = ((7 - this.options.weekStart) * (100 / 7)) + '%';
                }
                else {
                    newDay.style.marginLeft = ((day - 1) * (100 / 7)) + '%';
                }
            }
        }
        if (day === HelloWeek.DAYS_WEEK.SUNDAY || day === HelloWeek.DAYS_WEEK.SATURDAY) {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_WEEKEND);
        }
        if (this.options.disabledDaysOfWeek) {
            if (this.options.disabledDaysOfWeek.includes(day)) {
                newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
            }
        }
        if ((this.options.disablePastDays && this.date.getTime() <= this.todaysDate.getTime() - 1) ||
            (this.options.minDate && timestamp <= this.options.minDate) ||
            (this.options.maxDate && timestamp >= this.options.maxDate)) {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
        }
        else {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_ACTIVE);
        }
        if (this.options.disableDates) {
            if (this.options.disableDates[0] instanceof Array) {
                this.options.disableDates.map(function (date) {
                    if (_this.options.format) {
                        if (unixTimestamp >= new Date(date[0]).getTime() && unixTimestamp <= new Date(date[1] + ' 23:59:59').getTime()) {
                            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                        }
                    }
                    else {
                        if (unixTimestamp >= date[0] && unixTimestamp <= date[1]) {
                            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                        }
                    }
                });
            }
            else {
                if (this.options.format) {
                    if (this.options.disableDates.includes(this.formatDate(unixTimestamp, this.options.format))) {
                        newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                    }
                }
                else {
                    this.options.disableDates.map(function (date) {
                        if (_this.formatDate(new Date(unixTimestamp).getTime(), 'YYYY-MM-DD') === _this.formatDate(new Date(+date).getTime(), 'YYYY-MM-DD')) {
                            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                        }
                    });
                    if (this.options.disableDates.includes(unixTimestamp.toString())) {
                        newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                    }
                }
            }
        }
        if (new Date(this.date).setHours(0, 0, 0, 0) === new Date(this.todaysDate).setHours(0, 0, 0, 0) && this.options.todayHighlight) {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_TODAY);
            this.today = timestamp.toString();
            if (this.options.format) {
                this.today = this.formatDate(unixTimestamp, this.options.format);
            }
        }
        if (this.options.format) {
            this.selectedDays.find(function (day) {
                if (day === _this.formatDate(unixTimestamp, _this.options.format)) {
                    newDay.classList.toggle(HelloWeek.CSS_CLASSES.IS_SELECTED);
                }
            });
        }
        else {
            this.selectedDays.find(function (day) {
                if (day === timestamp.toString()) {
                    newDay.classList.toggle(HelloWeek.CSS_CLASSES.IS_SELECTED);
                }
            });
        }
        if (this.month) {
            this.month.appendChild(newDay);
        }
    };
    HelloWeek.prototype.monthsAsString = function (monthIndex) {
        return this.options.monthShort ? this.langs.monthsShort[monthIndex] : this.langs.months[monthIndex];
    };
    HelloWeek.prototype.weekAsString = function (weekIndex) {
        return this.options.weekShort ? this.langs.daysShort[weekIndex] : this.langs.days[weekIndex];
    };
    HelloWeek.prototype.updted = function () {
        var listDays = [];
        this.label.textContent = this.monthsAsString(this.date.getMonth()) + ' ' + this.date.getFullYear();
        var weekFormat = this.options.weekShort ? this.langs.daysShort : this.langs.days;
        this.week.textContent = '';
        for (var i = this.options.weekStart; i < this.langs.daysShort.length; i++) {
            listDays.push(i);
        }
        for (var i = 0; i < this.options.weekStart; i++) {
            listDays.push(i);
        }
        for (var _i = 0, listDays_1 = listDays; _i < listDays_1.length; _i++) {
            var day = listDays_1[_i];
            this.creatWeek(this.weekAsString(day));
        }
        this.createMonth();
    };
    HelloWeek.prototype.clearCalendar = function () {
        this.month.textContent = '';
    };
    HelloWeek.prototype.removeActiveClass = function () {
        for (var _i = 0, _a = Object.keys(this.activeDates); _i < _a.length; _i++) {
            var i = _a[_i];
            this.activeDates[i].classList.remove(HelloWeek.CSS_CLASSES.IS_SELECTED);
        }
    };
    HelloWeek.prototype.destroy = function () {
        this.removeActiveClass();
    };
    HelloWeek.prototype.readFile = function (file, callback) {
        var xobj = new XMLHttpRequest();
        xobj.overrideMimeType('application/json');
        xobj.open('GET', file, true);
        xobj.onreadystatechange = function () {
            if (xobj.readyState === 4 && xobj.status === 200) {
                callback(xobj.responseText);
            }
        };
        xobj.send(null);
    };
    HelloWeek.prototype.formatDate = function (timestamp, format) {
        var dt = new Date(timestamp);
        format = format.replace('dd', dt.getDate().toString());
        format = format.replace('DD', (dt.getDate() > 9 ? dt.getDate() : '0' + dt.getDate()).toString());
        format = format.replace('mm', (dt.getMonth() + 1).toString());
        format = format.replace('MMM', this.langs.months[dt.getMonth()]);
        format = format.replace('MM', ((dt.getMonth() + 1) > 9 ? (dt.getMonth() + 1) : '0' + (dt.getMonth() + 1)).toString());
        format = format.replace('mmm', this.langs.monthsShort[dt.getMonth()]);
        format = format.replace('yyyy', dt.getFullYear().toString());
        format = format.replace('YYYY', dt.getFullYear().toString());
        format = format.replace('YY', (dt.getFullYear().toString()).substring(2));
        format = format.replace('yy', (dt.getFullYear().toString()).substring(2));
        return format;
    };
    HelloWeek.extend = function (options) {
        var settings = {
            selector: '.hello-week',
            lang: 'en',
            langFolder: './dist/langs/',
            format: false,
            weekShort: true,
            monthShort: false,
            multiplePick: false,
            defaultDate: false,
            todayHighlight: true,
            disablePastDays: false,
            disabledDaysOfWeek: false,
            disableDates: false,
            weekStart: 0,
            minDate: false,
            maxDate: false,
            onLoad: function () { },
            onChange: function () { },
            onSelect: function () { },
        };
        var defaultSettings = options;
        for (var _i = 0, _a = Object.keys(defaultSettings); _i < _a.length; _i++) {
            var i = _a[_i];
            settings[i] = defaultSettings[i];
        }
        return settings;
    };
    HelloWeek.CSS_CLASSES = {
        MONTH: 'hello-week__month',
        DAY: 'hello-week__day',
        WEEK: 'hello-week__week',
        WEEK_DAY: 'hello-week__week__day',
        LABEL: 'hello-week__label',
        IS_ACTIVE: 'is-active',
        IS_SELECTED: 'is-selected',
        IS_DISABLED: 'is-disabled',
        IS_TODAY: 'is-today',
        IS_WEEKEND: 'is-weekend',
    };
    HelloWeek.DAYS_WEEK = {
        SUNDAY: 0,
        MONDAY: 1,
        TUESDAY: 2,
        WEDNESDAY: 3,
        THURSDAY: 4,
        FRIDAY: 5,
        SATURDAY: 6,
    };
    return HelloWeek;
}());
exports.HelloWeek = HelloWeek;
var hello_week_1 = __webpack_require__(/*! ./hello-week */ "./src/scripts/hello-week.ts");
var MyModule;
(function (MyModule) {
    MyModule.HelloWeek = hello_week_1.HelloWeek;
})(MyModule = exports.MyModule || (exports.MyModule = {}));
window.HelloWeek = MyModule.HelloWeek;


/***/ }),

/***/ "./src/styles/hello-week.scss":
/*!************************************!*\
  !*** ./src/styles/hello-week.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(/*! !../../node_modules/css-loader!../../node_modules/sass-loader/lib/loader.js!./hello-week.scss */ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/styles/hello-week.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(/*! ../../node_modules/style-loader/addStyles.js */ "./node_modules/style-loader/addStyles.js")(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {}

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,