/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/hello-week.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/scripts/hello-week.ts":
/*!***********************************!*\
  !*** ./src/scripts/hello-week.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ../styles/hello-week.scss */ "./src/styles/hello-week.scss");
var HelloWeek = (function () {
    function HelloWeek(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.selectedDays = [];
        this.options = HelloWeek.extend(options);
        this.selector = typeof this.options.selector === 'string' ? document.querySelector(this.options.selector) : this.options.selector;
        if (this.selector === null) {
            throw new Error('You need to specify a selector!');
        }
        this.activeDates = null;
        this.date = this.options.defaultDate ? new Date(this.options.defaultDate) : new Date();
        this.defaultDate = this.options.defaultDate ? new Date(this.options.defaultDate) : new Date();
        this.currentDay = new Date();
        this.month = this.selector.querySelector('.' + HelloWeek.CSS_CLASSES.MONTH);
        this.week = this.selector.querySelector('.' + HelloWeek.CSS_CLASSES.WEEK);
        this.label = this.selector.querySelector('.' + HelloWeek.CSS_CLASSES.LABEL);
        this.readFile(this.options.langFolder + this.options.lang + '.json', function (text) {
            _this.langs = JSON.parse(text);
            _this.init(function () { });
        });
    }
    HelloWeek.prototype.init = function (callback) {
        if (this.defaultDate) {
            if (this.options.format) {
                this.selectedDays.push(this.formatDate(this.defaultDate, this.options.format));
            }
            else {
                this.selectedDays.push(this.defaultDate);
            }
        }
        this.date.setDate(1);
        this.updted();
        this.options.onLoad.call(this);
        if (callback) {
            callback.call(this);
        }
    };
    HelloWeek.prototype.prev = function (callback) {
        this.clearCalendar();
        var prevMonth = this.date.getMonth() - 1;
        this.date.setMonth(prevMonth);
        this.updted();
        this.options.onChange.call(this);
        if (callback) {
            callback.call(this);
        }
    };
    HelloWeek.prototype.next = function (callback) {
        this.clearCalendar();
        var nextMonth = this.date.getMonth() + 1;
        this.date.setMonth(nextMonth);
        this.updted();
        this.options.onChange.call(this);
        if (callback) {
            callback.call(this);
        }
    };
    HelloWeek.prototype.getToday = function () {
        return this.options.format ? this.formatDate(this.currentDay, this.options.format) : this.currentDay;
    };
    HelloWeek.prototype.today = function () {
        this.clearCalendar();
        this.date = new Date();
        this.date.setDate(1);
        this.updted();
    };
    HelloWeek.prototype.clear = function (callback) {
        this.clearCalendar();
        this.date.setDate(1);
        this.selectedDays = [];
        this.updted();
        this.options.onClear.call(this);
        if (callback) {
            callback.call(this);
        }
    };
    HelloWeek.prototype.selectDay = function (callback) {
        var _this = this;
        this.activeDates = this.selector.querySelectorAll('.' + HelloWeek.CSS_CLASSES.IS_ACTIVE);
        for (var _i = 0, _a = Object.keys(this.activeDates); _i < _a.length; _i++) {
            var i = _a[_i];
            this.activeDates[i].addEventListener('click', function (event) {
                var selectDay = event.target;
                if (_this.options.format) {
                    _this.lastSelectedDay = _this.formatDate(parseInt(selectDay.dataset.timestamp) * 1000, _this.options.format);
                }
                else {
                    _this.lastSelectedDay = selectDay.dataset.timestamp;
                }
                if (_this.options.multiplePick) {
                    _this.selectedDays.push(_this.lastSelectedDay);
                    if (event.target.classList.contains(HelloWeek.CSS_CLASSES.IS_SELECTED)) {
                        _this.selectedDays = _this.selectedDays.filter(function (day) { return day !== _this.lastSelectedDay; });
                    }
                }
                else {
                    if (!event.target.classList.contains(HelloWeek.CSS_CLASSES.IS_DISABLED)) {
                        _this.removeActiveClass();
                    }
                    _this.selectedDays = [];
                    _this.selectedDays.push(_this.lastSelectedDay);
                }
                if (!event.target.classList.contains(HelloWeek.CSS_CLASSES.IS_DISABLED)) {
                    event.target.classList.toggle(HelloWeek.CSS_CLASSES.IS_SELECTED);
                }
                _this.options.onSelect.call(_this);
                if (callback) {
                    callback.call(_this);
                }
            });
        }
    };
    HelloWeek.prototype.creatWeek = function (dayShort) {
        var weekDay = document.createElement('span');
        weekDay.classList.add(HelloWeek.CSS_CLASSES.WEEK_DAY);
        weekDay.textContent = dayShort;
        this.week.appendChild(weekDay);
    };
    HelloWeek.prototype.createMonth = function () {
        var currentMonth = this.date.getMonth();
        while (this.date.getMonth() === currentMonth) {
            this.createDay(this.date.getDate(), this.date.getDay());
            this.date.setDate(this.date.getDate() + 1);
        }
        this.date.setMonth(this.date.getMonth() - 1);
        this.selectDay(function () { });
    };
    HelloWeek.prototype.createDay = function (num, day) {
        var _this = this;
        var unixTimestamp = Date.parse(this.date);
        var timestamp = unixTimestamp / 1000;
        var newDay = document.createElement('div');
        newDay.textContent = num;
        newDay.classList.add(HelloWeek.CSS_CLASSES.DAY);
        newDay.setAttribute('data-timestamp', timestamp);
        if (num === 1) {
            if (this.options.weekStart === HelloWeek.DAYS_WEEK.SUNDAY) {
                newDay.style.marginLeft = ((day) * (100 / 7)) + '%';
            }
            else {
                if (day === HelloWeek.DAYS_WEEK.SUNDAY) {
                    newDay.style.marginLeft = ((7 - this.options.weekStart) * (100 / 7)) + '%';
                }
                else {
                    newDay.style.marginLeft = ((day - 1) * (100 / 7)) + '%';
                }
            }
        }
        if (day === HelloWeek.DAYS_WEEK.SUNDAY || day === HelloWeek.DAYS_WEEK.SATURDAY) {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_WEEKEND);
        }
        if (this.options.disabledDaysOfWeek) {
            if (this.options.disabledDaysOfWeek.includes(day)) {
                newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
            }
        }
        if ((this.options.disablePastDays && this.date.getTime() <= this.defaultDate.getTime() - 1) || (this.options.minDate && timestamp <= this.options.minDate) || (this.options.maxDate && timestamp >= this.options.maxDate)) {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
        }
        else {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_ACTIVE);
        }
        if (this.options.disableDates) {
            if (this.options.disableDates[0] instanceof Array) {
                this.options.disableDates.map(function (date) {
                    if (_this.options.format) {
                        if (unixTimestamp >= new Date(date[0]).getTime() && unixTimestamp <= new Date(date[1] + ' 23:59:59').getTime()) {
                            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                        }
                    }
                    else {
                        if (unixTimestamp >= date[0] && unixTimestamp <= date[1]) {
                            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                        }
                    }
                });
            }
            else {
                if (this.options.format) {
                    if (this.options.disableDates.includes(this.formatDate(unixTimestamp, this.options.format))) {
                        newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                    }
                }
                else {
                    this.options.disableDates.map(function (date) {
                        if (_this.formatDate(new Date(unixTimestamp).getTime(), 'YYYY-MM-DD') === _this.formatDate(new Date(+date).getTime(), 'YYYY-MM-DD')) {
                            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                        }
                    });
                    if (this.options.disableDates.includes(unixTimestamp.toString())) {
                        newDay.classList.add(HelloWeek.CSS_CLASSES.IS_DISABLED);
                    }
                }
            }
        }
        if (new Date(this.date).setHours(0, 0, 0, 0) === new Date(this.currentDay).setHours(0, 0, 0, 0) && this.options.todayHighlight) {
            newDay.classList.add(HelloWeek.CSS_CLASSES.IS_TODAY);
        }
        if (this.options.format) {
            this.selectedDays.find(function (day) {
                if (day === _this.formatDate(unixTimestamp, _this.options.format)) {
                    newDay.classList.toggle(HelloWeek.CSS_CLASSES.IS_SELECTED);
                }
            });
        }
        else {
            this.selectedDays.find(function (day) {
                if (day === timestamp.toString()) {
                    newDay.classList.toggle(HelloWeek.CSS_CLASSES.IS_SELECTED);
                }
            });
        }
        if (this.month) {
            this.month.appendChild(newDay);
        }
    };
    HelloWeek.prototype.monthsAsString = function (monthIndex) {
        return this.options.monthShort ? this.langs.monthsShort[monthIndex] : this.langs.months[monthIndex];
    };
    HelloWeek.prototype.weekAsString = function (weekIndex) {
        return this.options.weekShort ? this.langs.daysShort[weekIndex] : this.langs.days[weekIndex];
    };
    HelloWeek.prototype.updted = function () {
        var listDays = [];
        this.label.textContent = this.monthsAsString(this.date.getMonth()) + ' ' + this.date.getFullYear();
        this.week.textContent = '';
        for (var i = this.options.weekStart; i < this.langs.daysShort.length; i++) {
            listDays.push(i);
        }
        for (var i = 0; i < this.options.weekStart; i++) {
            listDays.push(i);
        }
        for (var _i = 0, listDays_1 = listDays; _i < listDays_1.length; _i++) {
            var day = listDays_1[_i];
            this.creatWeek(this.weekAsString(day));
        }
        this.createMonth();
    };
    HelloWeek.prototype.clearCalendar = function () {
        this.month.textContent = '';
    };
    HelloWeek.prototype.removeActiveClass = function () {
        for (var _i = 0, _a = Object.keys(this.activeDates); _i < _a.length; _i++) {
            var i = _a[_i];
            this.activeDates[i].classList.remove(HelloWeek.CSS_CLASSES.IS_SELECTED);
        }
    };
    HelloWeek.prototype.destroy = function () {
        this.removeActiveClass();
    };
    HelloWeek.prototype.readFile = function (file, callback) {
        var xobj = new XMLHttpRequest();
        xobj.overrideMimeType('application/json');
        xobj.open('GET', file, true);
        xobj.onreadystatechange = function () {
            if (xobj.readyState === 4 && xobj.status === 200) {
                callback(xobj.responseText);
            }
        };
        xobj.send(null);
    };
    HelloWeek.prototype.formatDate = function (timestamp, format) {
        var dt = new Date(timestamp);
        format = format.replace('dd', dt.getDate().toString());
        format = format.replace('DD', (dt.getDate() > 9 ? dt.getDate() : '0' + dt.getDate()).toString());
        format = format.replace('mm', (dt.getMonth() + 1).toString());
        format = format.replace('MMM', this.langs.months[dt.getMonth()]);
        format = format.replace('MM', ((dt.getMonth() + 1) > 9 ? (dt.getMonth() + 1) : '0' + (dt.getMonth() + 1)).toString());
        format = format.replace('mmm', this.langs.monthsShort[dt.getMonth()]);
        format = format.replace('yyyy', dt.getFullYear().toString());
        format = format.replace('YYYY', dt.getFullYear().toString());
        format = format.replace('YY', (dt.getFullYear().toString()).substring(2));
        format = format.replace('yy', (dt.getFullYear().toString()).substring(2));
        return format;
    };
    HelloWeek.extend = function (options) {
        var settings = {
            selector: '.hello-week',
            lang: 'en',
            langFolder: './dist/langs/',
            format: false,
            weekShort: true,
            monthShort: false,
            multiplePick: false,
            defaultDate: false,
            todayHighlight: true,
            disablePastDays: false,
            disabledDaysOfWeek: false,
            disableDates: false,
            weekStart: 0,
            minDate: false,
            maxDate: false,
            onLoad: function () { },
            onChange: function () { },
            onSelect: function () { },
            onClear: function () { },
        };
        var defaultSettings = options;
        for (var _i = 0, _a = Object.keys(defaultSettings); _i < _a.length; _i++) {
            var i = _a[_i];
            settings[i] = defaultSettings[i];
        }
        return settings;
    };
    HelloWeek.CSS_CLASSES = {
        MONTH: 'hello-week__month',
        DAY: 'hello-week__day',
        WEEK: 'hello-week__week',
        WEEK_DAY: 'hello-week__week__day',
        LABEL: 'hello-week__label',
        IS_ACTIVE: 'is-active',
        IS_SELECTED: 'is-selected',
        IS_DISABLED: 'is-disabled',
        IS_TODAY: 'is-today',
        IS_WEEKEND: 'is-weekend',
    };
    HelloWeek.DAYS_WEEK = {
        SUNDAY: 0,
        MONDAY: 1,
        TUESDAY: 2,
        WEDNESDAY: 3,
        THURSDAY: 4,
        FRIDAY: 5,
        SATURDAY: 6,
    };
    return HelloWeek;
}());
exports.HelloWeek = HelloWeek;
var hello_week_1 = __webpack_require__(/*! ./hello-week */ "./src/scripts/hello-week.ts");
var MyModule;
(function (MyModule) {
    MyModule.HelloWeek = hello_week_1.HelloWeek;
})(MyModule = exports.MyModule || (exports.MyModule = {}));
window.HelloWeek = MyModule.HelloWeek;


/***/ }),

/***/ "./src/styles/hello-week.scss":
/*!************************************!*\
  !*** ./src/styles/hello-week.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,